Q1. Print numbers from 1 to n without the help of loops. You only need to   complete the function printNos() that takes N as parameter and prints number from 1 to N recursively.

class Solution{
    public:
    //Complete this function
    void printNos(int N, int x=1)
    {
        //Your code here
        if(x>N) return;
        cout<<x<<" ";
        
        printNos(N,x+1);
    }
};

Q2. Print a name n times.

void print(string name, int n){
    if(n==0) return;
    cout<<name<<endl;
    
    print(name,--n);
}

int main(){
    print("Harry", 2);
    
    return 0;
}

Q3. Print linearly from 1 to N.

void print(int n, int i=1){
    if(i>n) return;
    cout<<i<<" ";
    
    print(n,++i);
}

int main(){
    print(5);
    
    return 0;
}

Q4. Print in terms on n to 1.

void print(int i, int n){
    if(i<1) return;
    
    cout<<i<<endl;
    print(i-1,n);
    
}

int main(){
    print(5,5);
    
    return 0;
}

Q6. Print 1 to n using backtracking.

void print(int i, int n){
    if(i<1) return;
    
    print(i-1,n);
    cout<<i<<endl;
}

int main(){
    print(5,5);
    
    return 0;
}

Q7. Print in terms of n to 1 using backtracking.

void print(int n, int i=1){
    if(i>n) return;
    
    print(n,i+1);
    cout<<i<<" ";
}

int main(){
    print(5);
    
    return 0;
}

Q8. Sum of first n numbers.(Parameterized)

void func(int i, int sum){
    
    if(i<1){
        cout<<sum<<endl;
        return;
    }
    func(i-1,sum+i);
}

int main(){
    func(3,0);
    
    return 0;
}


Q9. Sum of first n numbers.(Functional)

int sum(int n){
    if(n==0) 
        return 0;
    return n + sum(n-1);
}
    
int main(){
    cout<<sum(3);
    
    return 0;
}


Q10. Factorial(Functional)

int factorial(int n){
    if(n==1) 
        return 1;
    return n * factorial(n-1);
}
    
int main(){
    cout<<factorial(5);
    
    return 0;
}

Q11. Factorial(Parameterized)

void factorial(int n,int i){
    if(n==1){
        cout<<i;
        return;
    }
    factorial(n-1,i*n);
}
    
int main(){
    factorial(5,1);
    
    return 0;
}

Q12. Problem statement:

You are given a positive integer ‘N’. You have to find the sum of first ‘N’ natural numbers.

#include <bits/stdc++.h> 
using namespace std;

long long int firstN(int n) {
    // Return 0 if n is 0
    if (n == 0) 
        return 0;
    // Use the formula to calculate the sum
    return (static_cast<long long>(n) * (n + 1)) / 2;
}

Explanation:
Base Case: If n is 0, return 0.
Formula: The formula computes the sum in constant time without recursion.
Type Safety: Using static_cast<long long>(n) ensures that the multiplication does not overflow for larger values of n.